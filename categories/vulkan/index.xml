<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vulkan on LuuBluum's Coding Blog</title><link>https://LuuBluum.github.io/categories/vulkan/</link><description>Recent content in Vulkan on LuuBluum's Coding Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Sep 2022 12:32:40 -0700</lastBuildDate><atom:link href="https://LuuBluum.github.io/categories/vulkan/index.xml" rel="self" type="application/rss+xml"/><item><title>Learning Vulkan with Rust, Part 9: Uniform Buffers</title><link>https://LuuBluum.github.io/posts/post9rustvulkan/</link><pubDate>Mon, 12 Sep 2022 12:32:40 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post9rustvulkan/</guid><description>&lt;p>Now that we have &lt;a href="https://vulkan-tutorial.com/Vertex_buffers/Vertex_input_description">vertex buffers&lt;/a> all set up, there remains one glaring flaw in our approach. Namely, we&amp;rsquo;re still limited to 2D. What about 3D? For that, we need to implement &lt;a href="https://vulkan-tutorial.com/Uniform_buffers/Descriptor_layout_and_buffer">uniform buffers&lt;/a> and start being able to handle global variables in the Rust side of things.. All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 8: Vertex Buffers</title><link>https://LuuBluum.github.io/posts/post8rustvulkan/</link><pubDate>Wed, 17 Aug 2022 20:14:35 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post8rustvulkan/</guid><description>&lt;p>We &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Drawing/Framebuffers">drew&lt;/a> a triangle! However, that&amp;rsquo;s not enough; there are plenty of inefficiencies and not-so-good design practices that we did to get there. For one, we baked in our vertex information into the shader itself! That&amp;rsquo;s not scalable. So, we need to start exploring &lt;a href="https://vulkan-tutorial.com/Vertex_buffers/Vertex_input_description">vertex buffers&lt;/a> to load in vertex data from the code itself. All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 7: Drawing</title><link>https://LuuBluum.github.io/posts/post7rustvulkan/</link><pubDate>Sun, 14 Aug 2022 21:20:32 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post7rustvulkan/</guid><description>&lt;p>The moment of truth is here! After handling the &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Graphics_pipeline_basics/Introduction">graphics pipeline&lt;/a>, we&amp;rsquo;re on our way to &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Drawing/Framebuffers">drawing our first triangle&lt;/a>! All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 6: The Graphics Pipeline</title><link>https://LuuBluum.github.io/posts/post6rustvulkan/</link><pubDate>Sat, 13 Aug 2022 12:32:47 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post6rustvulkan/</guid><description>&lt;p>Now that we have &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Presentation/Swap_chain">the swapchain&lt;/a> and &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Presentation/Image_views">image views&lt;/a> set up, we can finally start work on something a bit more broadly relevant: the &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Graphics_pipeline_basics/Introduction">graphics pipeline&lt;/a>. All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 5: The Swap Chain and Image Views</title><link>https://LuuBluum.github.io/posts/post5rustvulkan/</link><pubDate>Sat, 06 Aug 2022 20:19:44 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post5rustvulkan/</guid><description>&lt;p>With a &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Presentation/Window_surface">surface&lt;/a> provided, we can now move to one of the more daunting components of Vulkan: the &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Presentation/Swap_chain">swap chain&lt;/a>. After that, we need to take care of &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Presentation/Image_views">image views&lt;/a> so that the swap chain has something to actually swap in. This will probably be the most challenging bit so far. Probably. All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 4: Surfaces</title><link>https://LuuBluum.github.io/posts/post4rustvulkan/</link><pubDate>Sat, 06 Aug 2022 10:23:53 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post4rustvulkan/</guid><description>&lt;p>With the &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Physical_devices_and_queue_families">physical&lt;/a> and &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Logical_device_and_queues">logical&lt;/a> devices now configured, we can move on to actually creating a &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Presentation/Window_surface">Vulkan surface&lt;/a> to draw on. From there, we can actually start fiddling with layers relevant to graphics! All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 3: Adding Physical and Logical Devices</title><link>https://LuuBluum.github.io/posts/post3rustvulkan/</link><pubDate>Mon, 01 Aug 2022 15:54:34 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post3rustvulkan/</guid><description>&lt;p>With validation layers set up back in &lt;a href="https://luubluum.github.io/posts/post2rustvulkan/">part 2&lt;/a>, we can finally move on to adding &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Physical_devices_and_queue_families">physical&lt;/a> and &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Logical_device_and_queues">logical&lt;/a> devices! All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 2: Creating a Vulkan Instance with Validation Layers</title><link>https://LuuBluum.github.io/posts/post2rustvulkan/</link><pubDate>Sun, 31 Jul 2022 14:45:18 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post2rustvulkan/</guid><description>&lt;p>Having created the basic code structure for setting up a Vulkan project in Rust back in &lt;a href="https://luubluum.github.io/posts/post1rustvulkan/">part 1&lt;/a>, we can now actually deal with creating a &lt;a href="https://vulkan-tutorial.com/en/Drawing_a_triangle/Setup/Instance">Vulkan instance&lt;/a> and setting up &lt;a href="https://vulkan-tutorial.com/Drawing_a_triangle/Setup/Validation_layers">validation layers&lt;/a>. All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item><item><title>Learning Vulkan with Rust, Part 1: Base Code</title><link>https://LuuBluum.github.io/posts/post1rustvulkan/</link><pubDate>Sat, 30 Jul 2022 21:05:46 -0700</pubDate><guid>https://LuuBluum.github.io/posts/post1rustvulkan/</guid><description>&lt;p>I&amp;rsquo;ve decided to go and work through and learn Vulkan in Rust. There will surely be no issues with this and everything will go smoothly without any errors. All of the code can be found at &lt;a href="https://github.com/LuuBluum/Learning-Vulkan-with-Rust">this repo&lt;/a>.&lt;/p></description></item></channel></rss>